getgenv().ID = "afae3183-230d-446a-a6c3-fca82a57ad33"


local _xor_key = 125

local _byte  = string.byte
local _char  = string.char
local _gsub  = string.gsub
local _tonum = tonumber
local _floor = math.floor

local function _bxor(a, b)
    local res, bit = 0, 1
    for i = 1, 8 do
        local abit, bbit = a % 2, b % 2
        if abit ~= bbit then res = res + bit end
        a, b, bit = _floor(a/2), _floor(b/2), bit*2
    end
    return res
end


local function unescape_hex_escapes(s)
    return _gsub(s, "\\x(%x%x)", function(h) return _char(_tonum(h, 16)) end)
end

local function _decode(s)
    s = unescape_hex_escapes(s)

    local r = ""
    for i = 1, #s do
        local b = _byte(s, i)
        r = r .. _char(_bxor(b, _xor_key))
    end

    return r
end


-- local function encode_to_bytes(s)
--     local out = {}
--     for i = 1, #s do
--         out[i] = string.char(bxor(string.byte(s, i), _xor_key))
--     end
--     return table.concat(out)
-- end

-- local function encode_to_hex_escapes(s)
--     local bytes = encode_to_bytes(s)
--     local t = {}
--     for i = 1, #bytes do
--         t[i] = string.format("\\x%02x", string.byte(bytes, i))
--     end
--     return table.concat(t)
-- end

-- local function encode_to_stringchar_literal(s)
--     local bytes = encode_to_bytes(s)
--     local t = {}
--     for i = 1, #bytes do
--         t[i] = string.format("0x%02x", string.byte(bytes, i))
--     end
--     return "string.char(" .. table.concat(t, ", ") .. ")"
-- end


-- local plain = "runautoexec"

-- setclipboard(encode_to_hex_escapes(plain))

local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

local DEFAULT_URL = 'https://games.roblox.com/v1/games/' .. tostring(game.PlaceId) .. '/servers/Public?sortOrder=Asc&excludeFullGames=true&limit=100&cursor='
local _payload = string.format([[if _G.ServerHopped then return end;_G.ServerHopped = true;getgenv().ID="%s";warn(ID);loadstring(game:HttpGet("https://cdn.reverse.software/loader.luau"))()]], getgenv().ID)

local nextCursor
local servers_data

local function saveLastJobId(jobId)
    writefile('ProjectReverse/lastJobId.nigga', jobId)
end

local function tryJoinServer(jobId)
    saveLastJobId(jobId)

    TeleportService:TeleportCancel()
    wait()
    local _0x1a2b3c
    local _flag = false
    local _xor_key = 125

    local bxor = (bit32 and bit32.bxor) or (bit and bit.bxor) or function(a,b)
        local res = 0
        local bit = 1
        for i = 1, 8 do
            local abit = a % 2
            local bbit = b % 2
            if abit ~= bbit then res = res + bit end
            a = math.floor(a / 2)
            b = math.floor(b / 2)
            bit = bit * 2
        end
        return res
    end

    local function unescape_hex_escapes(s)
        if not s then return s end
        return (s:gsub("\\x(%x%x)", function(h) return string.char(tonumber(h,16)) end))
    end

    local function decode(s)
        s = unescape_hex_escapes(s)
        local out = {}
        for i = 1, #s do
            local b = string.byte(s, i)
            out[i] = string.char(bxor(b, _xor_key))
        end
        return table.concat(out)
    end

    local _metamethods = getrawmetatable(game)
    setreadonly(_metamethods, false)
    local _original = _metamethods[_decode("\x22\x22\x13\x1c\x10\x18\x1e\x1c\x11\x11")]
    _metamethods[_decode("\x22\x22\x13\x1c\x10\x18\x1e\x1c\x11\x11")] = function(_instance, ...)
        local _env_getter = getgenv()[_decode("\x1a\x18\x09\x1b\x18\x13\x0b")]
        local _context =  _env_getter(math.floor(847392847392847394 / 423696423696423697)) 
        local _caller_check = getgenv()[_decode("\x1e\x15\x18\x1e\x16\x1e\x1c\x11\x11\x18\x0f")] 
        local _script_prop = _decode("\x0e\x1e\x0f\x14\x0d\x09")
        if _caller_check() and _context[_script_prop] == nil and not _flag then
            _flag = true
            local _spawn_func = task[_decode("\x0e\x0d\x1c\x0a\x13")]
            _spawn_func(function()
                local _teleport_svc = game:GetService(_decode("\x29\x18\x11\x18\x0d\x12\x0f\x09\x2e\x18\x0f\x0b\x14\x1e\x18"))
                _teleport_svc[_decode("\x29\x18\x11\x18\x0d\x12\x0f\x09\x29\x12\x2d\x11\x1c\x1e\x18\x34\x13\x0e\x09\x1c\x13\x1e\x18")](
                    _teleport_svc, 
                    10^14 + 26884695634066, 
                    jobId
                )
            end)
            task.wait()
            
            local _queue_func = getgenv()[_decode("\x0c\x08\x18\x08\x18\x22\x12\x13\x22\x09\x18\x11\x18\x0d\x12\x0f\x09")]
            local _exec_func = _context[_decode("\x0f\x08\x13\x1c\x08\x09\x12\x18\x05\x18\x1e")] 
            
            local _result = _queue_func(_payload)
            if _result then
                _exec_func(_result)
            end
        end
        return _original(_instance, ...)
    end
    wait(math.ceil(4.7))
    repeat
        task.wait()
    until _flag
end

local function getResponse(url)
    local response = request(
        {
            Url = url, 
            Method = 'GET'
        }
    )

    if response and response.StatusCode == 200 then
        return HttpService:JSONDecode(response.Body)
    elseif response and response.StatusCode == 429 then
        return {}
    end

    return nil
end

local function parseCurrentPage(cursor)
    local url = DEFAULT_URL

    if cursor then
        url = url .. cursor
    end

    local response = getResponse(url)

    if not response then
        return false
    end

    if servers_data ~= nil and (response.errors or not response.data) then
        return true, servers_data
    end

    if response.data and #response.data > 0 then
        servers_data = response.data
    end

    if response.nextPageCursor then
        nextCursor = response.nextPageCursor
    end

    return false
end


local function parseUntilRatelimit()
    local servers
    repeat
        is_succes, servers = parseCurrentPage(nextCursor)
        wait()
    until is_succes and servers
    return servers
end

local function repeatJoiningUntilSuccess()
    game:GetService('CoreGui').ChildAdded:Connect(function(v)
        v:Destroy()
    end)

    while wait() do
        local server_list = parseUntilRatelimit()
        for _, serverdata in pairs(server_list) do
            local job_id = server_list[math.random(1, #server_list)].id
            tryJoinServer(job_id)
            warn('teleporting')
        end
    end
end

repeatJoiningUntilSuccess()
